{"remainingRequest":"D:\\dev\\house-price-generator\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\dev\\house-price-generator\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\dev\\house-price-generator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dev\\house-price-generator\\src\\views\\Outer\\Start.vue?vue&type=template&id=7b84c264&scoped=true&","dependencies":[{"path":"D:\\dev\\house-price-generator\\src\\views\\Outer\\Start.vue","mtime":1653991072000},{"path":"D:\\dev\\house-price-generator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686117401432},{"path":"D:\\dev\\house-price-generator\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1686117406056},{"path":"D:\\dev\\house-price-generator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686117401432},{"path":"D:\\dev\\house-price-generator\\node_modules\\vue-loader\\lib\\index.js","mtime":1686117404688}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
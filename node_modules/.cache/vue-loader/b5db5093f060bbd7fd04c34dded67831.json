{"remainingRequest":"D:\\dev\\house-price-generator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dev\\house-price-generator\\src\\views\\Index.vue?vue&type=template&id=23543608&","dependencies":[{"path":"D:\\dev\\house-price-generator\\src\\views\\Index.vue","mtime":1686221235859},{"path":"D:\\dev\\house-price-generator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686117401432},{"path":"D:\\dev\\house-price-generator\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1686117406056},{"path":"D:\\dev\\house-price-generator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686117401432},{"path":"D:\\dev\\house-price-generator\\node_modules\\vue-loader\\lib\\index.js","mtime":1686117404688}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}